"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[571],{3271:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var r=a(4246),s=a(1670),t=a(3930),o=a(9798);const i={sidebar_position:3,title:"Usage with faker-js",description:"use faker to create pseudo random generators"},c=void 0,l={id:"examples/faker",title:"Usage with faker-js",description:"use faker to create pseudo random generators",source:"@site/docs/examples/faker.mdx",sourceDirName:"examples",slug:"/examples/faker",permalink:"/mocq/docs/examples/faker",draft:!1,unlisted:!1,editUrl:"https://github.com/nxzq/mocq/tree/main/website/docs/examples/faker.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Usage with faker-js",description:"use faker to create pseudo random generators"},sidebar:"docsSidebar",previous:{title:"Database Load",permalink:"/mocq/docs/examples/database-load"},next:{title:"Usage with Static Data",permalink:"/mocq/docs/examples/static-data"}},d={},m=[];function p(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,s.a)(),...e.components},{Details:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://fakerjs.dev/",children:"faker-js"}),' is a popular library used to "generate realistic data and not obvious fake data"']})}),"\n","\n","\n",(0,r.jsxs)(t.Z,{groupId:"code-block-language",children:[(0,r.jsx)(o.Z,{value:"js",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { mocq } from "mocq";\nimport { faker } from "@faker-js/faker";\n\nconst fakerUserGenerator = () => ({\n  id: faker.string.uuid(),\n  first_name: faker.person.firstName(),\n  last_name: faker.person.lastName(),\n  company: faker.company.name()\n});\n\nconst { generate } = mocq({\n  users: {\n    generator: fakerUserGenerator,\n    count: 100,\n  }\n});\n\nconst { data: { users } } = generate();\n'})})}),(0,r.jsx)(o.Z,{value:"ts",label:"TypeScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { mocq, MocQ } from "mocq";\nimport { faker } from "@faker-js/faker";\n\ntype User = {\n  id: string\n  first_name: string\n  last_name: string\n  company: string\n};\n\nconst fakerUserGenerator = (): User => ({\n  id: faker.string.uuid(),\n  first_name: faker.person.firstName(),\n  last_name: faker.person.lastName(),\n  company: faker.company.name()\n});\n\nconst { generate } = mocq({\n  users: {\n    generator: fakerUserGenerator,\n    count: 100,\n  } as MocQ<User>\n});\n\nconst { data: { users } } = generate();\n'})})})]}),"\n",(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(n.p,{children:"Sample Resolved Data"})}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"users"}),":"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[\n  {\n    id: "c0d180fa-6933-4184-a503-dd96fb0b565a",\n    first_name: "Bonita",\n    last_name: "Orn",\n    company: "Lubowitz and Sons"\n  },\n  {\n    id: "f72f7c86-569d-4f35-bc66-b4df6b8b1a5e",\n    first_name: "Clara",\n    last_name: "Dickinson",\n    company: "Kihn LLC"\n  },\n  {\n    id: "6232f606-56ba-4f2e-8e2d-367685731379",\n    first_name: "Bell",\n    last_name: "Douglas",\n    company: "Ledner LLC"\n  },\n  // ... 97 more entries\n]\n'})})]}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsxs)(n.p,{children:["when generating unique fields, consider creating a string literal with the index when not using ",(0,r.jsx)(n.code,{children:"faker.string.uuid"}),"\nas faker will duplicate random values in large enough data sets"]}),(0,r.jsxs)(t.Z,{groupId:"code-block-language",children:[(0,r.jsx)(o.Z,{value:"js",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const fakerCompanyGenerator = (i) => ({\n  // highlight-next-line\n  company: `${faker.company.name()} (${i})`\n});\n"})})}),(0,r.jsx)(o.Z,{value:"ts",label:"TypeScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const fakerCompanyGenerator = (i: number): Company => ({\n  // highlight-next-line\n  company: `${faker.company.name()} (${i})`\n});\n"})})})]})]}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsxs)(n.p,{children:["faker has many useful helper functions including ",(0,r.jsx)(n.code,{children:"faker.helpers.arrayElement"})," which grabs a random value from an array, it works great as connection function if the desired result is that the data is simply connected in some way"]}),(0,r.jsxs)(t.Z,{groupId:"code-block-language",children:[(0,r.jsx)(o.Z,{value:"js",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const { generate } = mocq({\n  users: {\n    generator: fakerUserGenerator,\n    count: 100,\n    connections: {\n      // highlight-next-line\n      companies: (i, data)=>({ company: faker.helpers.arrayElement(data).id })\n    }\n  },\n  companies: {\n    generator: fakerCompanyGenerator,\n    count: 25\n  }\n});\n\nconst { data: { users, companies } } = generate();\n"})})}),(0,r.jsx)(o.Z,{value:"ts",label:"TypeScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const { generate } = mocq({\n  users: {\n    generator: fakerUserGenerator,\n    count: 100,\n    connections: {\n      // highlight-next-line\n      companies: (i: number, data: Company[])=>({ company: faker.helpers.arrayElement(data).id })\n    }\n  } as MocQ<User>,\n  companies: {\n    generator: fakerCompanyGenerator,\n    count: 25\n  } as MocQ<Company>\n});\n\nconst { data: { users, companies } } = generate();\n"})})})]})]})]})}function f(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);