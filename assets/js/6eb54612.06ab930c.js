"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[410],{7855:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>m,frontMatter:()=>c,metadata:()=>l,toc:()=>g});var o=r(4246),t=r(1670),s=r(3930),i=r(9798),a=r(2536);const c={title:"Tutorial",sidebar_position:2},d=void 0,l={id:"tutorial",title:"Tutorial",description:"Let's discover [mocq] in less than 5 minutes.",source:"@site/docs/tutorial.mdx",sourceDirName:".",slug:"/tutorial",permalink:"/mocq/docs/tutorial",draft:!1,unlisted:!1,editUrl:"https://github.com/nxzq/mocq/tree/main/website/docs/tutorial.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Tutorial",sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Getting Started",permalink:"/mocq/docs/"},next:{title:"Examples",permalink:"/mocq/docs/examples"}},h={},g=[{value:"Getting Started",id:"getting-started",level:2},{value:"Generatoring Data",id:"generatoring-data",level:2},{value:"Connecting Data",id:"connecting-data",level:2},{value:"Handling Resolved Data",id:"handling-resolved-data",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["Let's discover ",(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.code,{children:"[mocq]"})," in less than 5 minutes"]}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,o.jsxs)(n.p,{children:["For this tutorial we will be working with these two types ",(0,o.jsx)(n.code,{children:"User"})," and ",(0,o.jsx)(n.code,{children:"Node"})]}),"\n","\n","\n",(0,o.jsxs)(s.Z,{groupId:"code-block-language",children:[(0,o.jsx)(i.Z,{value:"js",label:"JavaScript",children:(0,o.jsx)(a.Z,{language:"ts",children:"type User = {\n  username: string\n  email: string\n};\ntype Node = {\n  name: string\n  createdBy: string\n};"})}),(0,o.jsx)(i.Z,{value:"ts",label:"TypeScript",children:(0,o.jsx)(a.Z,{language:"ts",title:"/types.ts",showLineNumbers:!0,children:"export type User = {\n  username: string\n  email: string\n};\nexport type Node = {\n  name: string\n  createdBy: string\n};"})})]}),"\n",(0,o.jsxs)(n.p,{children:["In this contrived example ",(0,o.jsx)(n.code,{children:"Nodes"})," are created by ",(0,o.jsx)(n.code,{children:"Users"})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"The goal of this tutorial will be:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["generate mock ",(0,o.jsx)(n.code,{children:"Users"})," & ",(0,o.jsx)(n.code,{children:"Nodes"})]}),"\n",(0,o.jsxs)(n.li,{children:["connect ",(0,o.jsx)(n.code,{children:"Node"})," data with ",(0,o.jsx)(n.code,{children:"User"})," data, ensuring every ",(0,o.jsx)(n.code,{children:"Node"})," is created by a valid ",(0,o.jsx)(n.code,{children:"User"})]}),"\n",(0,o.jsx)(n.li,{children:"explore using handlers to do something with this resolved data"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"generatoring-data",children:"Generatoring Data"}),"\n",(0,o.jsx)(n.p,{children:"First we'll define some data generator functions"}),"\n",(0,o.jsxs)(s.Z,{groupId:"code-block-language",children:[(0,o.jsx)(i.Z,{value:"js",label:"JavaScript",children:(0,o.jsx)(a.Z,{language:"js",title:"/generators.js",showLineNumbers:!0,children:"export const generateMockUser = (i) => {\n  const username = `user_${i}`;\n  return {\n    username,\n    email: `${username}@email.com`,\n  };\n};\n\nexport const generateMockNode = (i) => ({\n  name: `node_${i}`,\n  createdBy: 'unknown',\n});"})}),(0,o.jsx)(i.Z,{value:"ts",label:"TypeScript",children:(0,o.jsx)(a.Z,{language:"ts",title:"/generators.ts",showLineNumbers:!0,children:"export function generateMockUser (i: number): User {\n  const username = `user_${i}`;\n  return {\n    username,\n    email: `${username}@email.com`,\n  };\n};\n\nexport function generateMockNode (i: number): Node {\n  return: {\n    name: `node_${i}`,\n    createdBy: 'unknown',\n  };\n};"})})]}),"\n",(0,o.jsxs)(n.p,{children:["These functions create a ",(0,o.jsx)(n.code,{children:"singe instance"})," of ",(0,o.jsx)(n.code,{children:"Node"})," & ",(0,o.jsx)(n.code,{children:"User"})," type, and are handed ",(0,o.jsx)(n.code,{children:"index"})," for use with uniqueness"]}),"\n",(0,o.jsxs)(n.p,{children:["Now we define our configuration object, we'll make ",(0,o.jsx)(n.strong,{children:"25"})," ",(0,o.jsx)(n.code,{children:"Users"})," and ",(0,o.jsx)(n.strong,{children:"100"})," ",(0,o.jsx)(n.code,{children:"Nodes"})," using the generator functions we wrote above"]}),"\n",(0,o.jsxs)(n.p,{children:["We'll use the configuration key names ",(0,o.jsx)(n.code,{children:"users"})," and ",(0,o.jsx)(n.code,{children:"nodes"})," for our ",(0,o.jsx)(n.code,{children:"User"})," and ",(0,o.jsx)(n.code,{children:"Node"})," data type configurations to maintain context"]}),"\n",(0,o.jsxs)(s.Z,{groupId:"code-block-language",children:[(0,o.jsx)(i.Z,{value:"js",label:"JavaScript",children:(0,o.jsx)(a.Z,{language:"js",title:"/index.js",showLineNumbers:!0,children:"import { mocq } from 'mocq';\n// highlight-next-line\nimport { generateMockUser, generateMockNode } from './generators';\n\nconst config = {\n  // highlight-start\n  users: {\n    generator: generateMockUser,\n    count: 25,\n  },\n  nodes: {\n    generator: generateMockNode,\n    count: 100,\n  },\n  // highlight-end\n};\n\nconst { generate } = mocq(config);\n\nconst { data: { users, nodes } } = generate();"})}),(0,o.jsx)(i.Z,{value:"ts",label:"TypeScript",children:(0,o.jsx)(a.Z,{language:"ts",title:"/index.ts",showLineNumbers:!0,children:"import { mocq, MocQ } from 'mocq';\nimport { User, Node } from './types';\n// highlight-next-line\nimport { generateMockUser, generateMockNode } from './generators';\n\n// create a custom config type for strict type checking\ntype customMocqConfig: {\n  users: MocQ<User>,\n  nodes: MocQ<Node>,\n};\n\nconst config: customMocqConfig = {\n  // highlight-start\n  users: {\n    generator: generateMockUser,\n    count: 25,\n  },\n  nodes: {\n    generator: generateMockNode,\n    count: 100,\n  },\n  // highlight-end\n};\n\nconst { generate } = mocq(config);\n\nconst { data: { users, nodes } } = generate();"})})]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:(0,o.jsx)(n.p,{children:"Sample Resolved Data"})}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"users"}),":"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"[\n  {\n    username: 'user_0'\n    email: 'user_0@email.com'\n  },\n  // ... 24 more entries\n]\n"})}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"nodes"}),":"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"[\n  {\n    name: 'node_0'\n    createdBy: 'unkown'\n  },\n  // ... 99 more entries\n]\n"})})]}),"\n",(0,o.jsx)(n.h2,{id:"connecting-data",children:"Connecting Data"}),"\n",(0,o.jsxs)(n.p,{children:["Now we'll define our connection function, this function will assign a random ",(0,o.jsx)(n.code,{children:"User"})," username to the ",(0,o.jsx)(n.code,{children:"createdBy"})," value for each ",(0,o.jsx)(n.code,{children:"Node"})]}),"\n",(0,o.jsxs)(s.Z,{groupId:"code-block-language",children:[(0,o.jsx)(i.Z,{value:"js",label:"JavaScript",children:(0,o.jsx)(a.Z,{language:"js",title:"/connections.js",showLineNumbers:!0,children:"export const userCreatedNodeConnection = (i, users) => {\n  const randomIndex = Math.floor(Math.random() * users.length);\n  return {\n    createdBy: users[randomIndex].username,\n  };\n};"})}),(0,o.jsx)(i.Z,{value:"ts",label:"TypeScript",children:(0,o.jsx)(a.Z,{language:"ts",title:"/connections.ts",showLineNumbers:!0,children:"import { User, Node } from './types';\n\nexport function userCreatedNodeConnection (i: number: data: User[]): Partial<Node> {\n  const randomIndex = Math.floor(Math.random() * data.length);\n  return {\n    createdBy: data[randomIndex].username,\n  };\n};"})})]}),"\n",(0,o.jsxs)(n.p,{children:["Again this function is utilized at the ",(0,o.jsx)(n.code,{children:"instance level"}),", we are given the ",(0,o.jsx)(n.code,{children:"index"})," of the current ",(0,o.jsx)(n.code,{children:"Node"})," instance being manipulated\nand the resolved data from the ",(0,o.jsx)(n.code,{children:"users"})," config"]}),"\n",(0,o.jsxs)(n.p,{children:["Let's add the connection to the ",(0,o.jsx)(n.code,{children:"nodes"})," configuration under ",(0,o.jsx)(n.code,{children:"connections"})," with the key ",(0,o.jsx)(n.code,{children:"users"})," to enable the function to hook into the ",(0,o.jsx)(n.code,{children:"users"})," config resolved data"]}),"\n",(0,o.jsxs)(s.Z,{groupId:"code-block-language",children:[(0,o.jsx)(i.Z,{value:"js",label:"JavaScript",children:(0,o.jsx)(a.Z,{language:"js",title:"/index.js",showLineNumbers:!0,children:"import { mocq } from 'mocq';\nimport { generateMockUser, generateMockNode } from './generators';\n// highlight-next-line\nimport { userCreatedNodeConnection } from './connections';\n\nconst config = {\n  users: {\n    generator: generateMockUser,\n    count: 25,\n  },\n  nodes: {\n    generator: generateMockNode,\n    count: 100,\n    // highlight-start\n    connections: {\n      users: userCreatedNodeConnection,\n    };\n    // highlight-end\n  },\n};\n\nconst { generate } = mocq(config);\n\nconst { data: { users, nodes } } = generate();"})}),(0,o.jsx)(i.Z,{value:"ts",label:"TypeScript",children:(0,o.jsx)(a.Z,{language:"ts",title:"/index.ts",showLineNumbers:!0,children:"import { mocq, MocQ } from 'mocq';\nimport { User, Node } from './types';\nimport { generateMockUser, generateMockNode } from './generators';\n// highlight-next-line\nimport { userCreatedNodeConnection } from './connections';\n\n// create a custom config type for strict type checking\ntype customMocqConfig: {\n  users: MocQ<User>,\n  nodes: MocQ<Node>,\n};\n\nconst config: customMocqConfig = {\n  users: {\n    generator: generateMockUser,\n    count: 25,\n  },\n  nodes: {\n    generator: generateMockNode,\n    count: 100,\n    // highlight-start\n    connections: {\n      users: userCreatedNodeConnection,\n    };\n    // highlight-end\n  },\n};\n\nconst { generate } = mocq(config);\n\nconst { data: { users, nodes } } = generate();"})})]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:(0,o.jsx)(n.p,{children:"Sample Resolved Data"})}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"users"}),":"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"[\n  {\n    username: 'user_0'\n    email: 'user_0@email.com'\n  },\n  // ... 24 more entries\n]\n"})}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"nodes"}),":"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"[\n  {\n    name: 'node_0'\n    createdBy: 'user_7'\n  },\n  {\n    name: 'node_1'\n    createdBy: 'user_3'\n  },\n  // ... 98 more entries\n]\n"})})]}),"\n",(0,o.jsx)(n.h2,{id:"handling-resolved-data",children:"Handling Resolved Data"}),"\n",(0,o.jsx)(n.p,{children:"Our data is now generating correctly"}),"\n",(0,o.jsxs)(n.p,{children:["In our simple example it's very easy to see that ",(0,o.jsx)(n.code,{children:"Users"})," need to be defined before ",(0,o.jsx)(n.code,{children:"Nodes"})," in order for\nthe ",(0,o.jsx)(n.code,{children:"createdBy"})," field to be properly reference generated ",(0,o.jsx)(n.code,{children:"Users"})]}),"\n",(0,o.jsx)(n.p,{children:"However for larger data sets with many types of objects this order of operations might not be as apparent"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"That's where handlers come in to play"}),", allowing you to execute a function against resloved data utilizing the\nderived execution order used to generate the data"]}),"\n",(0,o.jsx)(n.p,{children:"Meaning whether you're writing this data to a database or calling an api with the data, handler functions will be executed\nin an order allowing parent data to be defined 1st allowing data to seemless flow into your data store"}),"\n",(0,o.jsx)(n.p,{children:"In this example we will simply log the output with our handler function"}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["handler functions can be ",(0,o.jsx)(n.code,{children:"sync"})," or ",(0,o.jsx)(n.code,{children:"async"})]})}),"\n",(0,o.jsxs)(s.Z,{groupId:"code-block-language",children:[(0,o.jsx)(i.Z,{value:"js",label:"JavaScript",children:(0,o.jsx)(a.Z,{language:"js",title:"/handlers.js",showLineNumbers:!0,children:"export const logHandler = (data) => {\n  data.map(x => console.log(x));\n};"})}),(0,o.jsx)(i.Z,{value:"ts",label:"TypeScript",children:(0,o.jsx)(a.Z,{language:"ts",title:"/handlers.ts",showLineNumbers:!0,children:"export function logHandler (data: any[]): void {\n  data.map(x => console.log(x));\n};"})})]}),"\n",(0,o.jsx)(n.p,{children:"Now lets add this handler to our configuration"}),"\n",(0,o.jsxs)(s.Z,{groupId:"code-block-language",children:[(0,o.jsx)(i.Z,{value:"js",label:"JavaScript",children:(0,o.jsx)(a.Z,{language:"js",title:"/index.js",showLineNumbers:!0,children:"import { mocq } from 'mocq';\nimport { generateMockUser, generateMockNode } from './generators';\nimport { userCreatedNodeConnection } from './connections';\n// highlight-next-line\nimport { logHandler } from './handlers';\n\nconst config = {\n  users: {\n    generator: generateMockUser,\n    count: 25,\n    // highlight-start\n    handler: logHandler,\n    // highlight-end\n  },\n  nodes: {\n    generator: generateMockNode,\n    count: 100,\n    connections: {\n      users: userCreatedNodeConnection,\n    };\n    // highlight-start\n    handler: logHandler,\n    // highlight-end\n  },\n};\n\nconst { execute } = mocq(config);\n\nconst { data: { users, nodes } } = await execute();"})}),(0,o.jsx)(i.Z,{value:"ts",label:"TypeScript",children:(0,o.jsx)(a.Z,{language:"ts",title:"/index.ts",showLineNumbers:!0,children:"import { mocq, MocQ } from 'mocq';\nimport { User, Node } from './types';\nimport { generateMockUser, generateMockNode } from './generators';\nimport { userCreatedNodeConnection } from './connections';\n// highlight-next-line\nimport { logHandler } from './handlers';\n\n// create a custom config type for strict type checking\ntype customMocqConfig: {\n  users: MocQ<User>,\n  nodes: MocQ<Node>,\n};\n\nconst config: customMocqConfig = {\n  users: {\n    generator: generateMockUser,\n    count: 25,\n    // highlight-start\n    handler: logHandler,\n    // highlight-end\n  },\n  nodes: {\n    generator: generateMockNode,\n    count: 100,\n    connections: {\n      users: userCreatedNodeConnection,\n    };\n    // highlight-start\n    handler: logHandler,\n    // highlight-end\n  },\n};\n\nconst { execute } = mocq(config);\n\nconst { data: { users, nodes } } = await execute();"})})]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:(0,o.jsx)(n.p,{children:"Sample Output"})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"{\n  username: 'user_0'\n  email: 'user_0@email.com'\n}\n{\n  username: 'user_1'\n  email: 'user_1@email.com'\n}\n// ... 23 more entries\n{\n  name: 'node_0'\n  createdBy: 'user_18'\n}\n{\n  name: 'node_1'\n  createdBy: 'user_2'\n}\n// ... 98 more entries\n"})})]}),"\n",(0,o.jsxs)(n.admonition,{title:"Congratulations",type:"tip",children:[(0,o.jsxs)(n.p,{children:["\ud83c\udf89 You have completed the ",(0,o.jsx)(n.code,{children:"[mocq]"})," tutorial \ud83c\udf89"]}),(0,o.jsxs)(n.p,{children:["You should have all the tools you need to start coding but if not check out the ",(0,o.jsx)(n.a,{href:"/docs",children:"docs"})," or browse the ",(0,o.jsx)(n.a,{href:"examples",children:"examples"})," for more \ud83d\ude80"]})]})]})}function m(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);