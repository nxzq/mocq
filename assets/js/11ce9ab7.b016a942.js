"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[249],{9152:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>b,contentTitle:()=>u,default:()=>p,frontMatter:()=>d,metadata:()=>h,toc:()=>f});var t=a(4246),r=a(1670),o=a(8948),s=a(6925),i=a(3930),c=a(9798),l=a(2536);const d={sidebar_position:2,title:"Database Load",description:"use mocq to create a database load function"},u=void 0,h={id:"examples/database-load",title:"Database Load",description:"use mocq to create a database load function",source:"@site/docs/examples/database-load.mdx",sourceDirName:"examples",slug:"/examples/database-load",permalink:"/mocq/docs/examples/database-load",draft:!1,unlisted:!1,editUrl:"https://github.com/nxzq/mocq/tree/main/website/docs/examples/database-load.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Database Load",description:"use mocq to create a database load function"},sidebar:"docsSidebar",previous:{title:"Basic Usage",permalink:"/mocq/docs/examples/basic-usage"},next:{title:"Test Assertions in Handler",permalink:"/mocq/docs/examples/test-assertions"}},b={},f=[{value:"Getting Started",id:"getting-started",level:2},{value:"Configuring Data",id:"configuring-data",level:2},{value:"Database Load Function",id:"database-load-function",level:2}];function g(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components},{Details:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n","\n",(0,t.jsx)(s.Z,{alt:"SQL Diagram",style:{aspectRatio:"3 / 1"},sources:{light:(0,o.Z)("/img/mocq-sql.png"),dark:(0,o.Z)("/img/mocq-sql-dark.png")}}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["this example will be using SQL however the ",(0,t.jsx)(n.strong,{children:"DB language is irrelevant"}),", all DB loads will follow this same pattern"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For this example we will assume a ",(0,t.jsx)(n.code,{children:"Book"})," always has one ",(0,t.jsx)(n.code,{children:"Publisher"})," and one ",(0,t.jsx)(n.code,{children:"Author"})]}),"\n",(0,t.jsxs)(n.p,{children:["We will be generating mock data utilizing ",(0,t.jsx)(n.a,{href:"/docs/examples/faker",children:"faker-js"})," and writing the generated data to a database"]}),"\n",(0,t.jsx)(n.h2,{id:"configuring-data",children:"Configuring Data"}),"\n",(0,t.jsxs)(n.p,{children:["In this example we have three types ",(0,t.jsx)(n.code,{children:"Publisher"}),", ",(0,t.jsx)(n.code,{children:"Author"})," and ",(0,t.jsx)(n.code,{children:"Book"})]}),"\n","\n","\n",(0,t.jsxs)(i.Z,{groupId:"code-block-language",children:[(0,t.jsx)(c.Z,{value:"js",label:"JavaScript",children:(0,t.jsx)(l.Z,{language:"ts",children:"type Publisher = {\n  id: string\n  name: string\n};\n\ntype Author = {\n  id: string\n  first_name: string\n  last_name: string\n};\n\ntype Book = {\n  id: string\n  publisher_id: string\n  author_id: string\n  name: string\n};"})}),(0,t.jsx)(c.Z,{value:"ts",label:"TypeScript",children:(0,t.jsx)(l.Z,{language:"ts",title:"/types.ts",showLineNumbers:!0,children:"export type Publisher = {\n  id: string\n  name: string\n};\n\nexport type Author = {\n  id: string\n  first_name: string\n  last_name: string\n};\n\nexport type Book = {\n  id: string\n  publisher_id: string\n  author_id: string\n  name: string\n};"})})]}),"\n",(0,t.jsxs)(n.p,{children:["Here are our data generators utilizing ",(0,t.jsx)(n.a,{href:"/docs/examples/faker",children:"faker-js"})]}),"\n",(0,t.jsxs)(i.Z,{groupId:"code-block-language",children:[(0,t.jsx)(c.Z,{value:"js",label:"JavaScript",children:(0,t.jsx)(l.Z,{language:"js",title:"/generators.js",showLineNumbers:!0,children:'import { faker } from "@faker-js/faker";\n  \nexport const generateMockPublisher = () => ({\n  id: faker.string.uuid(),\n  name: faker.company.name()\n});\n\nexport const generateMockAuthor = () => ({\n  id: faker.string.uuid(),\n  first_name: faker.person.firstName(),\n  last_name: faker.person.lastName()\n});\n\nexport const generateMockBook = () => ({\n  id: faker.string.uuid(),\n  publisher_id: faker.string.uuid(),\n  author_id: faker.string.uuid(),\n  name: faker.company.buzzPhrase()\n});'})}),(0,t.jsx)(c.Z,{value:"ts",label:"TypeScript",children:(0,t.jsx)(l.Z,{language:"ts",title:"/generators.ts",showLineNumbers:!0,children:"import { faker } from \"@faker-js/faker\";\nimport { Publisher, Author, Book } from './types';\n  \nexport function generateMockPublisher(): Publisher {\n  return {\n    id: faker.string.uuid(),\n    name: faker.company.name(),\n  };\n};\n\nexport function generateMockAuthor(): Author {\n  return {\n    id: faker.string.uuid(),\n    first_name: faker.person.firstName(),\n    last_name: faker.person.lastName(),\n  };\n};\n\nexport function generateMockBook(): Book {\n  return {\n    id: faker.string.uuid(),\n    publisher_id: faker.string.uuid(),\n    author_id: faker.string.uuid(),\n    name: faker.company.buzzPhrase(),\n  };\n};"})})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"[mocq]"})," configuration"]}),"\n",(0,t.jsxs)(i.Z,{groupId:"code-block-language",children:[(0,t.jsx)(c.Z,{value:"js",label:"JavaScript",children:(0,t.jsx)(l.Z,{language:"js",title:"/index.js",showLineNumbers:!0,children:"import { mocq } from 'mocq';\nimport { faker } from \"@faker-js/faker\";\nimport { generateMockPublisher, generateMockAuthor, generateMockBook } from './generators';\n\nconst config = {\n  publishers: {\n    generator: generateMockPublisher,\n    count: 3,\n  },\n  authors: {\n    generator: generateMockAuthor,\n    count: 5,\n  },\n  books: {\n    generator: generateMockBook,\n    count: 10,\n    connections: {\n      // setting book publisher_id to an ID from a random publisher\n      publishers: (publishers)=>({ publisher_id: faker.helpers.arrayElement(publishers).id }),\n      // setting book author_id to an ID from a random author\n      authors: (authors)=>({ author_id: faker.helpers.arrayElement(authors).id }),\n    },\n  },\n};\n\nconst { generate } = mocq(config);\n\nconst { data: { publishers, authors, books } } = generate();"})}),(0,t.jsx)(c.Z,{value:"ts",label:"TypeScript",children:(0,t.jsx)(l.Z,{language:"ts",title:"/index.ts",showLineNumbers:!0,children:"import { mocq, MocQ } from 'mocq';\nimport { faker } from \"@faker-js/faker\";\nimport { Publisher, Author, Book } from './types';\nimport { generateMockPublisher, generateMockAuthor, generateMockBook } from './generators';\n\n// create a custom config type for strict type checking\ntype customMocqConfig: {\n  publishers: MocQ<Publisher>\n  authors: MocQ<Author>\n  books: MocQ<Book>\n};\n\nconst config: customMocqConfig = {\n  publishers: {\n    generator: generateMockPublisher,\n    count: 3,\n  },\n  authors: {\n    generator: generateMockAuthor,\n    count: 5,\n  },\n  books: {\n    generator: generateMockBook,\n    count: 10,\n    connections: {\n      // setting book publisher_id to an ID from a random publisher\n      publishers: (data: Publisher[])=>({ publisher_id: faker.helpers.arrayElement(data).id }),\n      // setting book author_id to an ID from a random author\n      authors: (data: Author[])=>({ author_id: faker.helpers.arrayElement(data).id }),\n    },\n  },\n};\n\nconst { generate } = mocq(config);\n\nconst { data: { publishers, authors, books } } = generate();"})})]}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)(n.p,{children:"Sample Resolved Data"})}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"publishers"}),":"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'[\n  {\n    id: "59ce7ec3-ec1b-4096-a4f2-0c0da5725a06",\n    name: "Upton - Kuhn"\n  },\n  // ... 2 more entries\n]\n'})}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"authors"}),":"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'[\n  {\n    id: "dbaa0570-536b-4254-b1d3-f975ef1f4400",\n    first_name: "Russell",\n    last_name: "Zboncak"\n  },\n  // ... 4 more entries\n]\n'})}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"books"}),":"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'[\n  {\n    id: "a24be51e-1a3e-4959-bb8e-9cf6ca5e3c30",\n    publisher_id: "59ce7ec3-ec1b-4096-a4f2-0c0da5725a06",\n    author_id: "dbaa0570-536b-4254-b1d3-f975ef1f4400",\n    name: "engage value-added architectures"\n  }\n  // ... 9 more entries\n]\n'})})]}),"\n",(0,t.jsx)(n.h2,{id:"database-load-function",children:"Database Load Function"}),"\n",(0,t.jsx)(n.p,{children:"When working with a database it is convention to keep the database connection open and reuse it to reduce overhead"}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:["In this example we will just be logging the SQL but this ",(0,t.jsx)(n.code,{children:"getDbConnection"})," function is meant to represent your db language\nof choice connection or transaction function"]}),(0,t.jsxs)(i.Z,{groupId:"code-block-language",children:[(0,t.jsx)(c.Z,{value:"js",label:"JavaScript",children:(0,t.jsx)(l.Z,{language:"ts",title:"/database.js",showLineNumbers:!0,children:"export const getDbConnection = () => {\n  return {\n    write(...message: any[]) {\n      console.log('[SQL]', ...message)\n    },\n    close() {\n      console.log('[SQL] connection closed \u2705')\n    },\n  };\n};"})}),(0,t.jsx)(c.Z,{value:"ts",label:"TypeScript",children:(0,t.jsx)(l.Z,{language:"ts",title:"/database.ts",showLineNumbers:!0,children:"export type DbConnection = {\n  write: (...message: any[]) => void\n  close: () => void\n};\n\nexport function getDbConnection(): DbConnection {\n  return {\n    write(...message: any[]) {\n      console.log('[SQL]', ...message)\n    },\n    close() {\n      console.log('[SQL] connection closed \u2705')\n    },\n  };\n};"})})]})]}),"\n",(0,t.jsxs)(n.p,{children:["We'll create a Database Load Function that handles pre and post steps and wrap\nour ",(0,t.jsx)(n.code,{children:"[mocq]"})," configuration in a function that accepts the database connection"]}),"\n",(0,t.jsxs)(i.Z,{groupId:"code-block-language",children:[(0,t.jsx)(c.Z,{value:"js",label:"JavaScript",children:(0,t.jsx)(l.Z,{language:"js",title:"/index.js",showLineNumbers:!0,children:"import { mocq } from 'mocq';\nimport { faker } from \"@faker-js/faker\";\nimport { generateMockPublisher, generateMockAuthor, generateMockBook } from './generators';\nimport { getDbConnection } from './database'\n\n// highlight-start\n/*\n  we wrap our mocq usage in a function in order to preserve the\n  database connection reducing overhead\n*/ \n// highlight-end\nconst seedMockData = async (dbConnection) => {\n  const config = {\n    publishers: {\n      generator: generateMockPublisher,\n      count: 3,\n      // highlight-start\n      handler: (publishers) => {\n        publishers.forEach(x => dbConnection.write(`INSERT INTO publisher VALUES ('${x.id}', '${x.name}');`));\n      },\n      // highlight-end\n    },\n    authors: {\n      generator: generateMockAuthor,\n      count: 5,\n      // highlight-start\n      handler: (authors) => {\n        authors.forEach(x => dbConnection.write(`INSERT INTO author VALUES ('${x.id}', '${x.first_name}', '${x.last_name}');`));\n      },\n      // highlight-end\n    },\n    books: {\n      generator: generateMockBook,\n      count: 10,\n      connections: {\n        publishers: (publishers)=>({ publisher_id: faker.helpers.arrayElement(publishers).id }),\n        authors: (authors)=>({ author_id: faker.helpers.arrayElement(authors).id }),\n      },\n      // highlight-start\n      handler: (books) => {\n        books.forEach(x => dbConnection.write(`INSERT INTO books VALUES ('${x.id}', '${x.name}', '${x.publisher_id}', '${x.author_id}');`));\n      },\n      // highlight-end\n    },\n  };\n\n  const { execute } = mocq(config);\n  return execute()\n};\n\n// highlight-next-line\n/* database load \u0192(x) */\nconst loadDataBaseWithPseudoRandomData = async () => {\n  // highlight-next-line\n  // pre load step\n  const dbConnection = getDbConnection();\n  dbConnection.write('CREATE TABLE publishers (id char, name char);');\n  dbConnection.write('CREATE TABLE authors (id char, first_name char, last_name char);');\n  dbConnection.write('CREATE TABLE books (id char, name char, author_id char, publisher_id char);');\n  // highlight-next-line\n  // mocq executed\n  const { data: { publishers, authors, books }} = await seedMockData(dbConnection);\n  // highlight-next-line\n  // post load step\n  dbConnection.close();\n};\n\n// highlight-next-line\n/* execute database load \u0192(x) */\nawait loadDataBaseWithPseudoRandomData();"})}),(0,t.jsx)(c.Z,{value:"ts",label:"TypeScript",children:(0,t.jsx)(l.Z,{language:"ts",title:"/index.ts",showLineNumbers:!0,children:"import { mocq, MocQ } from 'mocq';\nimport { faker } from \"@faker-js/faker\";\nimport { Publisher, Author, Book } from './types';\nimport { generateMockPublisher, generateMockAuthor, generateMockBook } from './generators';\nimport { getDbConnection, DbConnection } from './database'\n\n// create a custom config type for strict type checking\ntype customMocqConfig: {\n  publishers: MocQ<Publisher>\n  authors: MocQ<Author>\n  books: MocQ<Book>\n};\n\n// highlight-start\n/*\n  we wrap our mocq usage in a function in order to preserve the\n  database connection reducing overhead\n*/ \n// highlight-end\nasync function seedMockData(dbConnection: DbConnection) {\n  const config: customMocqConfig = {\n    publishers: {\n      generator: generateMockPublisher,\n      count: 3,\n      // highlight-start\n      handler: (data: Publisher[]) => {\n        data.forEach(x => dbConnection.write(`INSERT INTO publisher VALUES ('${x.id}', '${x.name}');`));\n      },\n      // highlight-end\n    },\n    authors: {\n      generator: generateMockAuthor,\n      count: 5,\n      // highlight-start\n      handler: (data: Author[]) => {\n        data.forEach(x => dbConnection.write(`INSERT INTO author VALUES ('${x.id}', '${x.first_name}', '${x.last_name}');`));\n      },\n      // highlight-end\n    },\n    books: {\n      generator: generateMockBook,\n      count: 10,\n      connections: {\n        publishers: (data: Publisher[])=>({ publisher_id: faker.helpers.arrayElement(data).id }),\n        authors: (data: Author[])=>({ author_id: faker.helpers.arrayElement(data).id }),\n      },\n      // highlight-start\n      handler: (data: Book[]) => {\n        data.forEach(x => dbConnection.write(`INSERT INTO books VALUES ('${x.id}', '${x.name}', '${x.publisher_id}', '${x.author_id}');`));\n      },\n      // highlight-end\n    },\n  };\n\n  const { execute } = mocq(config);\n  return execute()\n};\n\n// highlight-next-line\n/* database load \u0192(x) */\nasync function loadDataBaseWithPseudoRandomData() {\n  // highlight-next-line\n  // pre load step\n  const dbConnection = getDbConnection();\n  dbConnection.write('CREATE TABLE publishers (id char, name char);');\n  dbConnection.write('CREATE TABLE authors (id char, first_name char, last_name char);');\n  dbConnection.write('CREATE TABLE books (id char, name char, author_id char, publisher_id char);');\n  // highlight-next-line\n  // mocq executed\n  const { data: { publishers, authors, books }} = await seedMockData(dbConnection);\n  // highlight-next-line\n  // post load step\n  dbConnection.close();\n};\n\n// highlight-next-line\n/* execute database load \u0192(x) */\nawait loadDataBaseWithPseudoRandomData();"})})]}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)(n.p,{children:"Sample Output"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"[SQL] CREATE TABLE publishers (id char, name char);\n[SQL] CREATE TABLE authors (id char, first_name char, last_name char);\n[SQL] CREATE TABLE books (id char, name char, author_id char, publisher_id char);\n[SQL] INSERT INTO publisher VALUES ('54b1d77c-5c7a-45b1-a59a-da56afec3ab7', 'Schultz - Cassin');\n[SQL] INSERT INTO publisher VALUES ('b854fe7f-d26f-47f3-83be-ce6b03be844f', 'Carter Group');\n[SQL] INSERT INTO publisher VALUES ('40bb1f15-f01e-42a9-834a-b9ae28dc655d', 'Rath and Sons');\n[SQL] INSERT INTO author VALUES ('e72766ee-bb85-4f5d-8986-f0d632416468', 'Deven', 'Williamson');\n[SQL] INSERT INTO author VALUES ('5db435c7-d092-4676-bc69-bc10c8618938', 'Korbin', 'Abshire');\n[SQL] INSERT INTO author VALUES ('b9a4708b-e82b-467e-b1fa-245c9f9174b3', 'Stan', 'Hudson');\n[SQL] INSERT INTO author VALUES ('e9d6035a-8cc6-437d-a860-51b1800855ef', 'Pete', 'Larkin');\n[SQL] INSERT INTO author VALUES ('15c665ea-6ae1-4ae5-91aa-58d66aeade86', 'Damaris', 'Swift');\n[SQL] INSERT INTO books VALUES ('04be8162-b5cf-41f3-baae-c2211745b974', 'maximize integrated deliverables', '40bb1f15-f01e-42a9-834a-b9ae28dc655d', 'e72766ee-bb85-4f5d-8986-f0d632416468');\n[SQL] INSERT INTO books VALUES ('b8b0f4e7-3d3d-471f-9064-fb6e71f3695c', 'evolve value-added applications', '40bb1f15-f01e-42a9-834a-b9ae28dc655d', 'e9d6035a-8cc6-437d-a860-51b1800855ef');\n[SQL] INSERT INTO books VALUES ('70bdd155-22fb-40b6-b6eb-2a9dd158ebf4', 'benchmark end-to-end partnerships', '40bb1f15-f01e-42a9-834a-b9ae28dc655d', 'e9d6035a-8cc6-437d-a860-51b1800855ef');\n[SQL] INSERT INTO books VALUES ('d918f05f-8ce0-408e-aebc-f00caa8c2fc0', 'e-enable strategic synergies', '40bb1f15-f01e-42a9-834a-b9ae28dc655d', '15c665ea-6ae1-4ae5-91aa-58d66aeade86');\n[SQL] INSERT INTO books VALUES ('bc6c70e9-97fa-4c03-906c-991524cf4ff0', 'grow front-end markets', 'b854fe7f-d26f-47f3-83be-ce6b03be844f', 'e9d6035a-8cc6-437d-a860-51b1800855ef');\n[SQL] INSERT INTO books VALUES ('be64e9c5-a4c8-4644-b83c-435b7f92a2f6', 'transition leading-edge networks', 'b854fe7f-d26f-47f3-83be-ce6b03be844f', 'e9d6035a-8cc6-437d-a860-51b1800855ef');\n[SQL] INSERT INTO books VALUES ('d9afdb08-77e2-44d1-bfc6-e57c94fdc5e8', 'whiteboard wireless interfaces', 'b854fe7f-d26f-47f3-83be-ce6b03be844f', '15c665ea-6ae1-4ae5-91aa-58d66aeade86');\n[SQL] INSERT INTO books VALUES ('1dc3ff59-2fc7-4f92-bcd8-e674b3d3a385', 'deliver strategic e-commerce', '54b1d77c-5c7a-45b1-a59a-da56afec3ab7', 'b9a4708b-e82b-467e-b1fa-245c9f9174b3');\n[SQL] INSERT INTO books VALUES ('3bd6c787-f977-415d-bbd7-a4cfd6ad5cd8', 'scale frictionless models', 'b854fe7f-d26f-47f3-83be-ce6b03be844f', '5db435c7-d092-4676-bc69-bc10c8618938');\n[SQL] INSERT INTO books VALUES ('c86b83d3-2e48-40af-8bee-f8fdda9ace82', 'disintermediate ubiquitous applications', '40bb1f15-f01e-42a9-834a-b9ae28dc655d', 'e9d6035a-8cc6-437d-a860-51b1800855ef');\n[SQL] connection closed \u2705\n"})})]})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},9798:(e,n,a)=>{a.d(n,{Z:()=>s});a(7378);var t=a(624);const r={tabItem:"tabItem_wHwb"};var o=a(4246);function s(e){let{children:n,hidden:a,className:s}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,t.Z)(r.tabItem,s),hidden:a,children:n})}},3930:(e,n,a)=>{a.d(n,{Z:()=>E});var t=a(7378),r=a(624),o=a(3457),s=a(3620),i=a(9834),c=a(654),l=a(784),d=a(1819);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:a}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:r}}=e;return{value:n,label:a,attributes:t,default:r}}))}(a);return function(e){const n=(0,l.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function b(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:a}=e;const r=(0,s.k6)(),o=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,c._X)(o),(0,t.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(r.location.search);n.set(o,e),r.replace({...r.location,search:n.toString()})}),[o,r])]}function g(e){const{defaultValue:n,queryString:a=!1,groupId:r}=e,o=h(e),[s,c]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!b({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o}))),[l,u]=f({queryString:a,groupId:r}),[g,p]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,o]=(0,d.Nk)(a);return[r,(0,t.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:r}),m=(()=>{const e=l??g;return b({value:e,tabValues:o})?e:null})();(0,i.Z)((()=>{m&&c(m)}),[m]);return{selectedValue:s,selectValue:(0,t.useCallback)((e=>{if(!b({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),p(e)}),[u,p,o]),tabValues:o}}var p=a(6457);const m={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};var k=a(4246);function x(e){let{className:n,block:a,selectedValue:t,selectValue:s,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.o5)(),d=e=>{const n=e.currentTarget,a=c.indexOf(n),r=i[a].value;r!==t&&(l(n),s(r))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;n=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;n=c[a]??c[c.length-1];break}}n?.focus()};return(0,k.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},n),children:i.map((e=>{let{value:n,label:a,attributes:o}=e;return(0,k.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>c.push(e),onKeyDown:u,onClick:d,...o,className:(0,r.Z)("tabs__item",m.tabItem,o?.className,{"tabs__item--active":t===n}),children:a??n},n)}))})}function j(e){let{lazy:n,children:a,selectedValue:r}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===r));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,k.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function S(e){const n=g(e);return(0,k.jsxs)("div",{className:(0,r.Z)("tabs-container",m.tabList),children:[(0,k.jsx)(x,{...e,...n}),(0,k.jsx)(j,{...e,...n})]})}function E(e){const n=(0,p.Z)();return(0,k.jsx)(S,{...e,children:u(e.children)},String(n))}},1670:(e,n,a)=>{a.d(n,{Z:()=>i,a:()=>s});var t=a(7378);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);